---
interface Props {
  href: string;
  text: string;
  type?: 'primary' | 'secondary';
  icon?: boolean;
  onClick?: string;
}

const { href, text, type = 'primary', icon = false, onClick } = Astro.props as Props;
---

<a 
  href={href} 
  class={`cta-button ${type}`}
  onclick={onClick}
  {...(href.startsWith('http') ? { target: '_blank', rel: 'noopener noreferrer' } : {})}
  aria-label={text}
>
  <span>{text}</span>
  {icon && type === 'primary' && (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
      <path fill-rule="evenodd" d="M3 10a.75.75 0 01.75-.75h10.638L10.23 5.29a.75.75 0 111.04-1.08l5.5 5.25a.75.75 0 010 1.08l-5.5 5.25a.75.75 0 11-1.04-1.08l4.158-3.96H3.75A.75.75 0 013 10z" clip-rule="evenodd" />
    </svg>
  )}
</a>

<style>
  .cta-button {
    /* Add your styles here */
  }
  .primary {
    /* Add your styles here */
  }
  .secondary {
    /* Add your styles here */
  }
</style>---
interface Props {
  href: string;
  text: string;
  type?: 'primary' | 'secondary';
  icon?: boolean;
  onClick?: string;
}

const { href, text, type = 'primary', icon = false, onClick } = Astro.props;
---

<a 
  href={href} 
  class={`cta-button ${type}`}
  onclick={onClick}
  {...(href.startsWith('http') ? { target: '_blank', rel: 'noopener noreferrer' } : {})}
>
  <span>{text}</span>
  {icon && type === 'primary' && (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
      <path fill-rule="evenodd" d="M3 10a.75.75 0 01.75-.75h10.638L10.23 5.29a.75.75 0 111.04-1.08l5.5 5.25a.75.75 0 010 1.08l-5.5 5.25a.75.75 0 11-1.04-1.08l4.158-3.96H3.75A.75.75 0 013 10z" clip-rule="evenodd" />
    </svg>
  )}
</a>

<style>
  .cta-button {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 1rem 2rem;
    border-radius: 8px;
    font-weight: 600;
    text-decoration: none;
    transition: all 0.3s ease;
    cursor: pointer;
  }

  .primary {
    background: var(--accent);
    color: white;
  }

  .primary:hover {
    background: var(--accent-light);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(99, 102, 241, 0.3);
  }

  .secondary {
    background: rgba(255, 255, 255, 0.1);
    color: white;
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .secondary:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: translateY(-2px);
  }

  svg {
    width: 20px;
    height: 20px;
    transition: transform 0.3s ease;
  }

  .primary:hover svg {
    transform: translateX(4px);
  }
</style>