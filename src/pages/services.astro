---
import Layout from '../layouts/Layout.astro';
import PageHero from '../components/PageHero.astro';
import ServicesGrid from '../components/ServicesGrid.astro';
import CTASection from '../components/CTASection.astro';

const services = [
  {
    icon: "🤖",
    title: "Gen AI Strategy & Development",
    description: "Custom AI solutions tailored to your business needs",
    features: [
      "AI Strategy Consulting",
      "Custom Model Development",
      "Integration Services",
      "Performance Optimization"
    ],
    link: "/contact"
  },
  {
    icon: "📊",
    title: "Data Intelligence",
    description: "Transform your data into actionable insights",
    features: [
      "Data Strategy",
      "Analytics Implementation",
      "Predictive Modeling",
      "Real-time Monitoring"
    ],
    link: "/contact"
  },
  {
    icon: "⚡",
    title: "Workflow Automation",
    description: "Streamline operations with intelligent automation",
    features: [
      "Process Analysis",
      "Custom Automation",
      "Integration Services",
      "Performance Tracking"
    ],
    link: "/contact"
  },
  {
    icon: "🛠️",
    title: "AI Tools & Agents",
    description: "Custom AI solutions for your specific needs",
    features: [
      "Custom AI Agents",
      "Tool Development",
      "API Integration",
      "Maintenance & Support"
    ],
    link: "/contact"
  }
].map(service => ({
  ...service,
  link: "/contact"
}));

const enterpriseServices = [
  {
    icon: "🎯",
    title: "Enterprise AI Transformation",
    description: "End-to-end AI transformation for large organizations",
    features: [
      "Digital Transformation Strategy",
      "Enterprise Architecture",
      "Change Management",
      "Training & Support"
    ],
    link: "/contact"
  },
  {
    icon: "🔒",
    title: "Security & Compliance",
    description: "Secure AI implementation following industry standards",
    features: [
      "Security Assessment",
      "Compliance Monitoring",
      "Risk Management",
      "Regular Audits"
    ],
    link: "/contact"
  },
  {
    icon: "🌐",
    title: "Global Deployment",
    description: "Worldwide AI solution deployment and management",
    features: [
      "Multi-region Support",
      "Localization",
      "Performance Optimization",
      "24/7 Monitoring"
    ],
    link: "/contact"
  }
].map(service => ({
  ...service,
  link: "/contact"
}));

const process = [
  {
    number: "01",
    title: "Discovery",
    description: "We begin with a thorough assessment of your business needs and objectives."
  },
  {
    number: "02",
    title: "Strategy",
    description: "Develop a comprehensive implementation strategy and roadmap."
  },
  {
    number: "03",
    title: "Development",
    description: "Custom solution development and integration with existing systems."
  },
  {
    number: "04",
    title: "Implementation",
    description: "Careful deployment and integration of AI solutions into your workflow."
  },
  {
    number: "05",
    title: "Optimization",
    description: "Continuous monitoring and optimization for maximum performance."
  }
];
---

<Layout title="Services - GenovateAI">
  <main>
    <PageHero
      title="Our Services"
      subtitle="Comprehensive AI Solutions for Your Business"
      background="https://images.unsplash.com/photo-1677442136019-21780ecad995"
      pattern="grid"
    />

    <section class="services-section">
      <div class="section-content">
        <h2 class="section-title">Core Services</h2>
        <ServicesGrid services={services} columns={2} />
      </div>
    </section>

    <section class="process-section">
      <div class="section-content">
        <h2 class="section-title">Our Process</h2>
        <div class="process-steps">
          {process.map((step, index) => (
            <div class="process-step" data-step={index + 1}>
              <div class="step-number">{step.number}</div>
              <div class="step-content">
                <h3>{step.title}</h3>
                <p>{step.description}</p>
              </div>
              {index < process.length - 1 && <div class="step-connector"></div>}
            </div>
          ))}
        </div>
      </div>
    </section>

    <section class="enterprise-section">
      <div class="section-content">
        <h2 class="section-title">Enterprise Solutions</h2>
        <ServicesGrid services={enterpriseServices} columns={3} />
      </div>
    </section>

    <CTASection
      title="Ready to Transform Your Business?"
      subtitle="Schedule a consultation to discuss your AI needs"
      primaryButton={{
        text: "Schedule a Demo",
        href: "/contact"
      }}
      secondaryButton={{
        text: "Learn More",
        href: "/about"
      }}
      background="https://images.unsplash.com/photo-1676401835893-ec90a38a286e"
      pattern="grid"
    />
  </main>
</Layout>

<style>
  .section-content {
    max-width: 1400px;
    margin: 0 auto;
    padding: 6rem 2rem;
  }

  .section-title {
    text-align: center;
    font-size: 2.5rem;
    color: white;
    margin-bottom: 3rem;
  }

  .process-section {
    background: linear-gradient(rgba(10, 11, 30, 0.95), rgba(10, 11, 30, 0.95)),
                url('https://images.unsplash.com/photo-1639762681485-074b7f938ba0') center/cover;
  }

  .process-steps {
    max-width: 800px;
    margin: 0 auto;
    position: relative;
  }

  .process-step {
    display: flex;
    gap: 2rem;
    position: relative;
    padding: 2rem;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 12px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    margin-bottom: 2rem;
    opacity: 0;
    transform: translateY(20px);
    transition: all 0.6s ease;
  }

  .process-step.visible {
    opacity: 1;
    transform: translateY(0);
  }

  .process-step:hover {
    transform: translateY(-5px);
    border-color: rgba(99, 102, 241, 0.3);
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.2);
  }

  .step-number {
    width: 40px;
    height: 40px;
    background: #6366f1;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    color: white;
    flex-shrink: 0;
  }

  .step-content {
    flex: 1;
  }

  .step-content h3 {
    color: white;
    margin: 0 0 0.5rem;
  }

  .step-content p {
    color: rgba(255, 255, 255, 0.7);
    margin: 0;
    line-height: 1.6;
  }

  .step-connector {
    position: absolute;
    left: 31px;
    bottom: -2rem;
    width: 2px;
    height: 2rem;
    background: #6366f1;
    transform: scaleY(0);
    transform-origin: top;
    transition: transform 0.4s ease;
  }

  .process-step.visible .step-connector {
    transform: scaleY(1);
  }

  @media (max-width: 768px) {
    .section-content {
      padding: 4rem 1rem;
    }

    .section-title {
      font-size: 2rem;
    }

    .process-step {
      flex-direction: column;
      text-align: center;
      gap: 1rem;
    }

    .step-number {
      margin: 0 auto;
    }

    .step-connector {
      left: 50%;
      transform: translateX(-50%);
    }
  }
</style>

<script>
// Intersection Observer for process steps animation
const processSteps = document.querySelectorAll('.process-step');
const observerOptions = {
  root: null,
  rootMargin: '0px',
  threshold: 0.1
};

const observer = new IntersectionObserver((entries) => {
  entries.forEach(entry => {
    if (entry.isIntersecting) {
      const step = entry.target;
      const delay = parseInt(step.dataset.step) * 200;
      setTimeout(() => {
        step.classList.add('visible');
      }, delay);
      observer.unobserve(step);
    }
  });
}, observerOptions);

processSteps.forEach(step => {
  observer.observe(step);
});
</script>